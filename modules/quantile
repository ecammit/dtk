#!/usr/bin/perl -w
use strict;

use List::Util qw(min max);

help() if @ARGV && $ARGV[0] =~ /^(?:\-\?|\-h|\-\-help)$/;
usage("1 or 2 arguments expected, but received " . scalar(@ARGV)) unless @ARGV == 1 || @ARGV == 2;

usage("first argument (q) must be a positive integer") unless $ARGV[0] =~ /^\d+$/ && $ARGV[0] > 0;
my $q = $ARGV[0];

my @ks = @ARGV > 1 ? index_list_parse($ARGV[1]) : (0..$q);
usage("k values must be in [0,$q]") unless min(@ks) >= 0 && max(@ks) <= $q;

my @unsorted;
while (<STDIN>) {
  push @unsorted, 1*$_;
}

my @sorted = sort {$a <=> $b} @unsorted;
print $_ . "\t" . quantile(\@sorted, $_, $q) . "\n" for @ks;

exit;


sub usage {
  usage_message(@_);
  exit 1;
}

sub usage_message {
  print STDERR map{"$_\n"} (@_,"") if @_;
  print STDERR <<'EOF';
usage: dtk quantile <q> [<k-values>]
EOF
}

sub help {
  usage_message(@_);
  print STDERR <<'EOF';

This tool provides quantile boundary values (e.g. median, 1st quartile, 95th percentile, etc) for the input dataset.

<q> - the number of quantiles into which the dataset should be divided.
<k-values> - optional. the indexes (or ranges of indexes) of the q-tiles to return. default 0-q

Get the min, the three quartiles, and the max for a dataset:
$ thing | dtk quantile 4

Get only the quartiles for a dataset:
$ thing | dtk quantile 4 1-3

Get the 50th, 90th, and 95th through 99th percentiles:
$ thing | dtk quantile 100 50,90,95-99

Get the smallest, median and largest elements in a dataset
$ thing | dtk quantile 2
EOF
  exit 1;
}

sub index_list_parse {
  my @input = split (/\s*,\s*/, $_[0]);

  my %vals;
  for (@input) {
    if (/^\s*(\d+)\s*$/) {
      $vals{$1}++;
    } elsif (/^\s*(\d+)\s*(?:-|\.\.)\s*(\d+)\s*$/) { 
      usage("in k-values, '$1-$2' is not a valid range") unless $1 <= $2;
      $vals{$_}++ for $1..$2;
    } else {
      usage("in k-values, '$_' is not a valid index or range");
    }
  }

  return sort {$a <=> $b} keys %vals;
}

sub quantile {
  my ($sorted, $k, $q) = @_;
  my $rank = scalar(@$sorted) * $k / $q;

  # the 1st rank is at index==0, so rank-1 => index
  if ($rank == scalar(@$sorted)) {
    return $sorted->[int($rank) - 1];
  } elsif ($rank == int($rank) && $rank != 0) {
    return ($sorted->[$rank - 1] + $sorted->[$rank])/2;
  } else {
    return $sorted->[int($rank)]
  }
}
